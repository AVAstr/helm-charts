# Default values for postgresql-single.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/sergelogvinov/postgresql
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

## command Override default container command
##
command: []

## PostgreSQL admin user
## ref: https://hub.docker.com/_/postgres
postgresqlUsername: postgres

## PostgreSQL password
## ref: https://hub.docker.com/_/postgres
##
# postgresqlPassword:

## Create a database
## ref: https://hub.docker.com/_/postgres
##
# postgresqlDatabase:

# postgresqlConfiguration:
# postgresqlConfigurationExtra:
# postgresqlConfigurationLogs:

# postgresqlConninfo: host=postgres user=postgres

pgHbaConfiguration: |-
  # host  database    user                  address       auth-method
  #
  local   all         all                                 trust
  local   replication postgres                            trust
  host    all         all                   localhost     trust
  host    postgres    postgres              10.0.0.0/8    md5
  hostssl postgres    postgres              10.0.0.0/8    md5
  host    replication postgres              10.0.0.0/8    md5
  hostssl replication postgres              10.0.0.0/8    md5

tlsCerts:
  create: false

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podlabels: {}

podAnnotations: {}

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 999
  runAsGroup: 999
  fsGroup: 999
  fsGroupChangePolicy: "OnRootMismatch"

priorityClassName: ~

terminationGracePeriodSeconds: 120

securityContext:
  seccompProfile:
    type: RuntimeDefault
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL

service:
  type: ClusterIP
  port: 5432

postgresqlServerMemory: "128"
resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

# extraVolumes:
#   - name: gcp-certs
#     secret:
#       defaultMode: 420
#       secretName: backup-gcp
# extraVolumeMounts:
#   - name: gcp-certs
#     mountPath: /etc/gcp
#     readOnly: true

persistence:
  enabled: false
  ## A manually managed Persistent Volume and Claim
  ## If defined, PVC must be created manually before volume will be bound
  # existingClaim:
  mountPath: /database
  # storageClass: "-"
  accessModes:
    - ReadWriteOnce
  size: 8Gi
  annotations: {}

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

## updateStrategy for PostgreSQL StatefulSet and its slaves StatefulSets
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
updateStrategy:
  type: RollingUpdate

backup:
  enabled: false
  recovery: false

  walpush: false
  walg: ~

  cleanPolicy: "retain FULL 3"

  # set value "" to disable cron backup
  schedule: "15 4 * * *"

  resources:
    limits:
      cpu: 2
      memory: 1Gi
    requests:
      cpu: 1500m
      memory: 512Mi

  # AffinityPreset with statefulset pods
  podAffinityPreset: hard

backupCheck:
  enabled: false
  schedule: "15 8 * * *"

  resources:
    limits:
      cpu: 2
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 512Mi

  persistence:
    ## A manually managed Persistent Volume and Claim
    # existingClaim:
    #
    # storageClass: "-"
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    annotations: {}

  nodeSelector: {}

  tolerations: []

  affinity: {}

metrics:
  enabled: false
  image:
    repository: quay.io/prometheuscommunity/postgres-exporter
    pullPolicy: IfNotPresent
    tag: v0.11.1

  database: postgres
  username: postgres

  queries: |-
    pg_replication:
      query: "SELECT CASE WHEN NOT pg_is_in_recovery() THEN 0 ELSE GREATEST (0, EXTRACT(EPOCH FROM (now() - pg_last_xact_replay_timestamp()))) END AS lag"
      master: true
      metrics:
        - lag:
            usage: "GAUGE"
            description: "Replication lag behind master in seconds"
    pg_postmaster:
      query: "SELECT pg_postmaster_start_time as start_time_seconds from pg_postmaster_start_time()"
      master: true
      metrics:
        - start_time_seconds:
            usage: "GAUGE"
            description: "Time at which postmaster started"
    {{- if semverCompare ">=14.0" (.Values.image.tag | default .Chart.AppVersion) }}
    pg_stat_slow_queries:
      query: SELECT pg_get_userbyid(userid) as rolname,t3.datname,queryid,calls,max_exec_time / 1000 as max_time_seconds,REGEXP_REPLACE(substring(query,1,100),'["\n\s]','','g') as sql FROM pg_stat_statements t1 JOIN pg_database t3 ON (t1.dbid=t3.oid) WHERE rows != 0 AND max_exec_time > 1000 ORDER BY max_exec_time DESC LIMIT 10
      metrics:
        - rolname:
            usage: "LABEL"
            description: "Name of user"
        - datname:
            usage: "LABEL"
            description: "Name of database"
        - queryid:
            usage: "LABEL"
            description: "Query ID"
        - sql:
            usage: "LABEL"
            description: "SQL"
        - calls:
            usage: "COUNTER"
            description: "Number of times executed"
        - max_time_seconds:
            usage: "GAUGE"
            description: "Maximum time spent in the statement, in milliseconds"
    {{- end }}
    pg_stat_activity_idle:
      query: |
        WITH
          metrics AS (
            SELECT
              application_name,
              SUM(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - state_change))::bigint)::float AS process_seconds_sum,
              COUNT(*) AS process_seconds_count
            FROM pg_stat_activity
            WHERE state = 'idle'
            GROUP BY application_name
          ),
          buckets AS (
            SELECT
              application_name,
              le,
              SUM(
                CASE WHEN EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - state_change)) <= le
                  THEN 1
                  ELSE 0
                END
              )::bigint AS bucket
            FROM
              pg_stat_activity,
              UNNEST(ARRAY[1, 2, 5, 15, 30, 60, 90, 120, 300]) AS le
            GROUP BY application_name, le
            ORDER BY application_name, le
          )
        SELECT
          application_name,
          process_seconds_sum,
          process_seconds_count,
          ARRAY_AGG(le) AS process_seconds,
          ARRAY_AGG(bucket) AS process_seconds_bucket
        FROM metrics JOIN buckets USING (application_name)
        GROUP BY 1, 2, 3
      metrics:
        - application_name:
            usage: "LABEL"
            description: "Application Name"
        - process_seconds:
            usage: "HISTOGRAM"
            description: "Idle time of server processes"

  resources:
    limits:
      cpu: 200m
      memory: 128Mi
    requests:
      cpu: 10m
      memory: 32Mi

nodeSelector: {}

tolerations: []

affinity: {}
