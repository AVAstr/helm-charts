apiVersion: apps/v1
{{- if .Values.useDaemonSet }}
kind: DaemonSet
{{- else }}
kind: Deployment
{{- end }}
metadata:
  name: {{ include "tailscale.fullname" . }}
  labels:
    {{- include "tailscale.labels" . | nindent 4 }}
spec:
  {{- if not .Values.useDaemonSet }}
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: {{ .Values.updateStrategy.type }}
    rollingUpdate:
      {{- toYaml .Values.updateStrategy.rollingUpdate | nindent 6 }}
  {{- else }}
  updateStrategy:
    type: {{ .Values.updateStrategy.type }}
    rollingUpdate:
      maxUnavailable: 30%
  {{- end }}
  selector:
    matchLabels:
      {{- include "tailscale.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "tailscale.selectorLabels" . | nindent 8 }}
    spec:
      enableServiceLinks: false
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "tailscale.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      dnsPolicy: "None"
      dnsConfig:
        nameservers:
          - 127.0.0.1
        searches:
          - cluster.local
        options:
          - name: ndots
            value: "3"
      initContainers:
        - name: {{ .Chart.Name }}-init-tailscale
          securityContext:
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              add:
                - NET_ADMIN
                - NET_RAW
              drop:
                - ALL
            runAsNonRoot: false
            runAsUser: 0
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/start/init-tailscale.sh"]
          volumeMounts:
            - name: scripts
              mountPath: /start
        - name: {{ .Chart.Name }}-init
          securityContext:
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop:
                - ALL
          image: ghcr.io/sergelogvinov/curl:8.3.0
          imagePullPolicy: IfNotPresent
          command: ["/start/init.sh"]
          env:
            - name: NODE
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: scripts
              mountPath: /start
            - name: state
              mountPath: /tmp
      containers:
        - name: {{ .Chart.Name }}-dns
          image: coredns/coredns:1.11.1
          imagePullPolicy: IfNotPresent
          args: [ "-conf", "/etc/coredns/Corefile" ]
          volumeMounts:
            - name: coredns
              mountPath: /etc/coredns
              readOnly: true
          resources:
            limits:
              memory: 170Mi
            requests:
              cpu: 100m
              memory: 70Mi
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 60
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          securityContext:
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - all
            readOnlyRootFilesystem: true
            runAsUser: 0
            runAsGroup: 53
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/start/entrypoint.sh"]
          # args: ["TS_EXTRA_ARGS=\"--hostname=$HOSTNAME -advertise-exit-node --advertise-tags=$TS_TAGS\" /usr/local/bin/containerboot"]
          env:
            # - name: TS_KUBE_SECRET
            #   value: {{ include "tailscale.fullname" . }}-state
            - name: TS_USERSPACE
              value: "false"
            # - name: TS_STATE_DIR
            #   value: /tmp
            {{- if .Values.service.p2pPort }}
            - name: TS_TAILSCALED_EXTRA_ARGS
              value: "-no-logs-no-support -port={{ .Values.service.p2pPort }}"
            {{- end }}
            - name: NODE
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          envFrom:
            - secretRef:
                name: {{ include "tailscale.fullname" . }}
          ports:
            - name: socks
              containerPort: {{ .Values.service.port }}
              protocol: TCP
            {{- if .Values.service.p2pPort }}
            - name: p2p
              containerPort: {{ .Values.service.p2pPort }}
              protocol: UDP
            {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: scripts
              mountPath: /start
            - name: state
              mountPath: /tmp
            - name: tun
              mountPath: /dev/net/tun
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      affinity:
      {{- if not .Values.useDaemonSet }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels: {{- (include "tailscale.selectorLabels" .) | nindent 18 }}
              namespaces:
                - {{ .Release.Namespace | quote }}
              topologyKey: kubernetes.io/hostname
      {{- end }}
      {{- with .Values.affinity }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: scripts
          configMap:
            name: {{ include "tailscale.fullname" . }}
            defaultMode: 493
        - name: coredns
          configMap:
            name: {{ include "tailscale.fullname" . }}
            items:
              - key: Corefile
                path: Corefile
        - name: state
          emptyDir: {}
        - name: tun
          hostPath:
            path: /dev/net/tun
