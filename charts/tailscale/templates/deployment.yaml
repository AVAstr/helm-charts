apiVersion: apps/v1
{{- if .Values.useDaemonSet }}
kind: DaemonSet
{{- else }}
kind: Deployment
{{- end }}
metadata:
  name: {{ include "tailscale.fullname" . }}
  labels:
    {{- include "tailscale.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  {{- if not .Values.useDaemonSet }}
  strategy:
    type: {{ .Values.updateStrategy.type }}
    rollingUpdate:
      {{- toYaml .Values.updateStrategy.rollingUpdate | nindent 6 }}
  {{- else }}
  updateStrategy:
    type: {{ .Values.updateStrategy.type }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "tailscale.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "tailscale.selectorLabels" . | nindent 8 }}
    spec:
      enableServiceLinks: false
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "tailscale.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["sh","-c"]
          args: ["TS_EXTRA_ARGS=\"--hostname=$HOSTNAME -advertise-exit-node --advertise-tags=$TS_TAGS\" /usr/local/bin/containerboot"]
          env:
            - name: TS_KUBE_SECRET
              value: {{ include "tailscale.fullname" . }}-state
            - name: TS_USERSPACE
              value: "false"
            - name: TS_STATE_DIR
              value: /tmp
            - name: TS_TAILSCALED_EXTRA_ARGS
              value: --state=mem
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          envFrom:
            - secretRef:
                name: {{ include "tailscale.fullname" . }}
          ports:
            - name: socks
              containerPort: {{ .Values.service.port }}
              protocol: TCP
            # - name: p2p
            #   containerPort: {{ .Values.service.port }}
            #   protocol: UDP
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: state
              mountPath: /tmp
            - name: tun
              mountPath: /dev/net/tun
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      affinity:
      {{- if not .Values.useDaemonSet }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels: {{- (include "tailscale.selectorLabels" .) | nindent 18 }}
              namespaces:
                - {{ .Release.Namespace | quote }}
              topologyKey: kubernetes.io/hostname
      {{- end }}
      {{- with .Values.affinity }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: state
          emptyDir: {}
        - name: tun
          hostPath:
            path: /dev/net/tun
